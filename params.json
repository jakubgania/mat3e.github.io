{
  "name": "DORF",
  "tagline": "Domain Object Reactive Forms for Angular 2 and TypeScript",
  "body": "## Domain Objec Reactive Forms\r\nAngular 2 gives a great support for creating [Reactive Forms](https://angular.io/docs/ts/latest/cookbook/dynamic-form.html), which are sometimes called also _Dynamic_ or _Model-driven Forms_.\r\n\r\nThis library is about taking _Reactive Forms_ to the next level by coupling them with _Domain Objects_.\r\n\r\n### Want to create a form field for object's property?\r\n1. Create  `DorfFieldDefinition` which contains info about a label, validators and more (e.g. type of the input field).\r\n    ```javascript\r\n    get nameDefinition(): DorfInputDefinition {\r\n        return {\r\n            label: \"Name\",\r\n            validator: Validators.required,\r\n            type: \"text\"\r\n        };\r\n    }\r\n    ```\r\n\r\n2. Create _Component_ which extends `AbstractDorfDetailsComponent` and uses a template similar to _details.view.html_ from the library (or even directly _details.view.html_).\r\n    ```javascript\r\n    @Component({\r\n        templateUrl: \"../../dorf/details.view.html\"\r\n    })\r\n    export class ExampleComponent extends AbstractDorfDetailsComponent<ExampleModel> implements OnInit\r\n    ```\r\n\r\n3. Inside your _Component_ override `getDomainObject` method for returning a domain object:\r\n    ```javascript\r\n    protected getDomainObject(): ExampleModel {\r\n        return this.model;\r\n    }\r\n    ```\r\nand `getFieldDefinitions` method for returning _propertyName-fieldDefinition_ map for your object:\r\n    ```javascript\r\n    protected getFieldDefinitions(): DorfPropertiesToDefinitionsMap<ExampleModel> {\r\n        return {\r\n            \"name\": this.model.nameDefinition\r\n        }\r\n    }\r\n    ```\r\n\r\n4. Call `super.ngOnInit();` inside your Component's `ngOnInit` method.\r\n\r\n5. You are done! Enjoy your _Reactive Form_.\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}